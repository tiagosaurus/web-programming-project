<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://fonts.googleapis.com/css?family=Poppins&display=swap" rel="stylesheet">
    <title>What's Happening In {{country_name}}?</title>
    <meta name="keywords" content="Foreign news, Trending Topics, Travel Weather">
    <meta name="description" content="Find the current trending topics where you're traveling - know what's happening.">
    <link rel="stylesheet" href="../app/temp/styles/styles.css">
    <script>
        window.onload = function () {
            let country_name = document.getElementById("country_name").innerHTML;
            if (['Belgium', 'Germany', 'France', 'Italy', 'Portugal'].includes(country_name)) {
                let picture = document.getElementById("region_image")
                picture.innerHTML = '<source srcset="../app/assets/images/' + country_name + '--large.png 1920w, ../app/assets/images/' + country_name + '--large-hi-dpi.png 3840w" media="(min-width: 1380px"><source srcset="../app/assets/images/' + country_name + '--medium.png 1380w, ../app/assets/images/' + country_name + '--medium-hi-dpi.png 2760w" media="(min-width: 990px"><source srcset="../app/assets/images/' + country_name + '--small.png 992w, ../app/assets/images/' + country_name + '--small-hi-dpi.png 1984w" media="(min-width: 640px"><img srcset="../app/assets/images/' + country_name + '--smaller.png 640w, ../app/assets/images/' + country_name + '--smaller-hi-dpi.png 1280w" alt="world map focused on {{country_name}}" class="world-map__image">';
            }
            let news_source = document.getElementById("news_source").innerHTML;
            let news_data = news_source.split("$~$");
            let titles = ["", "", ""];
            let urls = ["", "", ""];
            let images = ["", "", ""];
            let num_news = (news_data.length - 2) / 3;
            let titles_items = document.querySelectorAll("#news_title");
            let hrefs_items = document.querySelectorAll("#news_link");
            let image_items = document.querySelectorAll("#news_image");
            for (var i = 0; i < num_news; ++i) {
                titles[i] = news_data[(i * 3) + 1];
                titles_items[i].innerHTML = titles[i];
                urls[i] = news_data[(i * 3) + 2];
                hrefs_items[i].href = urls[i];
                images[i] = news_data[(i * 3) + 3];
                image_items[i].src = images[i];
            }
            let yt_link = document.getElementById("yt_link");
            let trends24_link = document.getElementById("trends24_link");
            let name_split = country_name.split(" ");
            let yt_url = "https://www.youtube.com/results?search_query=Popular+on+YouTube+-";
            for (word in name_split) {
                yt_url += "+" + name_split[word];
            }
            yt_url += "+channel";
            yt_link.href = yt_url;
            let trends_url = "https://trends24.in/" + name_split[0].toLowerCase();
            for (var i = 1; i < name_split.length; ++i) {
                trends_url += "-" + name_split[i].toLowerCase();
            }
            trends_url += "/";
            trends24_link.href = trends_url;
        }
    </script>
</head>

<body>
    <div id="country_name" style="display: none;">{{country_name}}</div>
    <div id="region" style="display: none;">{{region}}</div>
    <div id="news_source" style="display: none;">{{news}}</div>
    <header class="navbar">
        <div class="wrapper">
            <div class="navbar__logo">
            </div>
            <div class="navbar__menu-icon">

                <div class="navbar__menu-icon__middle"></div>

            </div>

            <div class="navbar__menu">
                <div class="navbar__btn-container"><a href="../../" class="btn">Home</a></div>
                <nav class="links">
                    <ul class="navbar__list">
                        <li class="navbar__li"><a href="#basic-info" id="basic-link">Basic Info</a></li>
                        <li class="navbar__li"><a href="#news" id="news-link">News</a></li>
                        <li class="navbar__li"><a href="#trending" id="trending-link">What's Trending?</a></li>
                        <li class="navbar__li"><a href="#weather" id="weather-link">Weather</a></li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>

    <div class="world-map">
        <picture id="region_image">
            <source srcset="../app/assets/images/regions/{{region}}--large.png 1920w, 
        ../app/assets/images/regions/{{region}}--large-hi-dpi.png 3840w" media="(min-width: 1380px">
            <source srcset="../app/assets/images/regions/{{region}}--medium.png 1380w, 
        ../app/assets/images/regions/{{region}}--medium-hi-dpi.png 2760w" media="(min-width: 990px">
            <source srcset="../app/assets/images/regions/{{region}}--small.png 992w,
        ../app/assets/images/regions/{{region}}--small-hi-dpi.png 1984w" media="(min-width: 640px">
            <img srcset="../app/assets/images/regions/{{region}}--smaller.png 640w, 
        ../app/assets/images/regions/{{region}}--smaller-hi-dpi.png 1280w" alt="World map focused on {{country_name}}">
        </picture>

        <div class="world-map__text-content">
            <div class="wrapper">
                <h1 class="world-map__title">{{country_name}}</h1>
                <h2 class="world-map__subtitle">What's going on?</h2>
                <p class="world-map__description">We're here to help you figure out what's happening.</p>
            </div>
        </div>
    </div>

    <div id="basic-info" class="page-section" data-link="#basic-link">
        <div class="wrapper">
            <h2 class="section-title section-title--blue">Basic Information</h2>
            <div class="info-item-flag">
                <img id="flag" src="">
            </div>
            <div class="row__large-4">
                <ul class="about-us__title info-item">
                    <li id="region-">Region: </li>
                    <li id="subregion-li">Sub-Region: </li>
                    <li id="language--">Language: </li>
                </ul>
            </div>
            <div class="row__large-4">
                <ul class="about-us__title info-item">
                    <li id="country-name">Name: </li>
                    <li id="capital">Capital: </li>
                    <li id="alpha3code">3-Letter code: </li>
                </ul>
            </div>
            <div class="row__large-4">
                <ul class="about-us__title info-item">
                    <li id="currency">Currency: </li>
                    <li id="area">Area: </li>
                    <li id="population">Population: </li>
                </ul>
            </div>
        </div>
    </div>


    <div id="news" class="page-section page-section--blue" data-link="#news-link">
        <div class="wrapper">
            <h2 class="section-title">Current News</h2>
            <h3 class="text-center">Powered by News API</h3>
            <div id="news_here">
                <div class="text-center">
                    <div class="trending container">
                        <a href="https://www.cnn.com/world" target="_blank" id="news_link" class="news-links">
                            <div id="news_title"></div>
                            <img id="news_image" src="../app/assets/images/cnn-cropped.jpg" class="news-image"
                                onerror="this.src='../app/assets/images/breaking-news-cropped.jpg'">
                        </a>
                    </div>
                </div>
                <div class="text-center">
                    <div class="trending container">
                        <a href="https://www.reuters.com/news/world" target="_blank" id="news_link" class="news-links">
                            <div id="news_title"></div>
                            <img id="news_image" src="../app/assets/images/reuters-cropped.jpg" class="news-image"
                                onerror="this.src='../app/assets/images/breaking-news-cropped.jpg'">
                        </a>
                    </div>
                </div>
                <div class="text-center">
                    <div class="trending container">

                        <a href="https://apnews.com/" target="_blank" id="news_link" class="news-links">
                            <div id="news_title"></div>
                            <img id="news_image" src="../app/assets/images/associated-press-cropped.png"
                                class="news-image" onerror="this.src='../app/assets/images/breaking-news-cropped.jpg'">
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="trending" class="page-section" data-link="#trending-link">
        <div class="wrapper">
            <h2 class="section-title section-title--blue">What's Trending?</h2>

            <div class="text-center">
                <div class="trending container">
                    <a target="_blank" href="https://www.youtube.com" id="yt_link"><img class="trending-pictures"
                            src="../app/assets/images/youtube-cropped.png"></a>
                    <a target="_blank" href="https://www.trends24.in" id="trends24_link"><img class="trending-pictures"
                            src="../app/assets/images/twitter-cropped.png"></a>
                </div>
            </div>
        </div>
    </div>

    <div id="weather" class="page-section page-section--blue" data-link="#weather-link">
        <div class="wrapper">
            <h2 class="section-title">Weather</h2>

            <section id="forecast" class="hidden">
                <h2 align="center">5 Day Forecast</h2>

                <p id="error-loading-city1" class="error-msg"></p>
                <table id="results-city1" align="center">
                    <caption id="city1-name"></caption>
                    <tr>
                    <td id="city1-day1-name"></td>
                    <td id="city1-day2-name"></td>
                    <td id="city1-day3-name"></td>
                    <td id="city1-day4-name"></td>
                    <td id="city1-day5-name"></td>
                    </tr>
                    <tr>
                    <td id="city1-day1-high"></td>
                    <td id="city1-day2-high"></td>
                    <td id="city1-day3-high"></td>
                    <td id="city1-day4-high"></td>
                    <td id="city1-day5-high"></td>
                    </tr>
                    <tr>
                    <td id="city1-day1-low"></td>
                    <td id="city1-day2-low"></td>
                    <td id="city1-day3-low"></td>
                    <td id="city1-day4-low"></td>
                    <td id="city1-day5-low"></td>
                    </tr>
                    <tr>
                    <td><img id="city1-day1-image"></td>
                    <td><img id="city1-day2-image"></td>
                    <td><img id="city1-day3-image"></td>
                    <td><img id="city1-day4-image"></td>
                    <td><img id="city1-day5-image"></td>
                    </tr>
                </table>

            </section>

        </div>
    </div>


    <footer>

    </footer>
    <script src="../app/temp/scripts/App.js"></script>
    <script>
        const url = 'https://restcountries.eu/rest/v2/name/'
        async function getData() {
            let country_name = document.getElementById("country_name").innerHTML;
            const data_url = url + country_name;
            const response = await fetch(data_url);
            const data = await response.json();
            console.log(data);
            document.getElementById('flag').src = data[0].flag;
            document.getElementById('alpha3code').innerHTML += data[0].alpha3Code;
            document.getElementById('region-').innerHTML += data[0].region;
            document.getElementById('country-name').innerHTML += data[0].name;
            document.getElementById('currency').innerHTML += data[0].currencies[0].name;
            document.getElementById('population').innerHTML += data[0].population + ' people';
            document.getElementById('subregion-li').innerHTML += data[0].subregion;
            document.getElementById('language--').innerHTML += data[0].languages[0].name;
            document.getElementById('capital').innerHTML += data[0].capital;
            document.getElementById('area').innerHTML += data[0].area;

            let capitalCity = data[0].capital;

            window.addEventListener("DOMContentLoaded", domLoaded);

            function domLoaded() {
                if(window.addEventListener) {
                    window.addEventListener("load",loadWeather,false);
                } 
                else {
                    window.attachEvent("onload",loadWeather);
                }
            }

            // Called when page is loaded
            function loadWeather() {
                // Get user input
                const city1 = capitalCity;

                // Show error messages if city fields left blank
                if (city1.length === 0) {
                    showElement("error-value-city1");
                }

                // Ensure city name is provided
                if (city1.length > 0 ) {
                    showElement("forecast");
                    hideElement("error-loading-city1");
                    hideElement("results-city1");

                    // Fetch forecasts
                    getWeatherForecast(city1, "city1");
                }
            }

            // Display the text in the element
            function showText(elementId, text) {
                document.getElementById(elementId).innerHTML = text;
            }

            // Show the element
            function showElement(elementId) {
                document.getElementById(elementId).classList.remove("hidden");
            }

            // Hide the element
            function hideElement(elementId) {
                document.getElementById(elementId).classList.add("hidden");
            } 

            // Request this city's forecast
            function getWeatherForecast(city, cityId) {
                // Create a URL to access the web API
                const endpoint = "https://api.openweathermap.org/data/2.5/forecast";
                const apiKey = "2e1f1d13b8f1a04c6da44730f7f9ab22";
                const queryString = `q=${encodeURI(city)}&units=imperial&appid=${apiKey}`;
                const url = `${endpoint}?${queryString}`;

                // Use XMLHttpRequest to make http request to web API
                const xhr = new XMLHttpRequest();

                // Call responseReceived() when response is received 
                xhr.addEventListener("load", function () {
                    responseReceived(xhr, cityId, city)
                });

                // JSON response needs to be converted into an object
                xhr.responseType = "json";

                // Send request
                xhr.open("GET", url);
                xhr.send();
            }

            // Display forecast recevied from JSON  
            function responseReceived(xhr, cityId, city) {
                    
                // 200 status indicates forecast successfully received
                if (xhr.status === 200) {
                    showElement("results-" + cityId);

                    const cityName = xhr.response.city.name;
                    showText(cityId + "-name", cityName);

                    // Get 5 day forecast
                    const forecast = getSummaryForecast(xhr.response.list);

                    // Put forecast into the city's table
                    let day = 1;
                    for (const date in forecast) {
                        // Only process the first 5 days
                        if (day <= 5) {
                            showText(`${cityId}-day${day}-name`, getDayName(date));
                            showText(`${cityId}-day${day}-high`, Math.round(forecast[date].high) + "&deg;");
                            showText(`${cityId}-day${day}-low`, Math.round(forecast[date].low) + "&deg;");
                            showImage(`${cityId}-day${day}-image`, forecast[date].weather);
                        }
                        day++;
                    }
                } 
                else {
                    // Display appropriate error message
                    const errorId = "error-loading-" + cityId;
                    showElement(errorId);
                    showText(errorId, `Unable to load city "${city}".`);
                }
            }

            // Convert date string into Mon, Tue, etc.
            function getDayName(dateStr) {
                const date = new Date(dateStr);
                return date.toLocaleDateString("en-US", { weekday: 'short', timeZone: 'UTC' });
            }

            // Show the weather image that matches the weatherType
            function showImage(elementId, weatherType) {   
                // Images for various weather types
                const weatherImages = {
                    Clear: "clear.png",
                    Clouds: "clouds.png",
                    Drizzle: "drizzle.png",
                    Mist: "mist.png",
                    Rain: "rain.png",
                    Snow: "snow.png"
                };

                const imgUrl = "https://s3-us-west-2.amazonaws.com/static-resources.zybooks.com/";
                const img = document.getElementById(elementId);
                img.src = imgUrl + weatherImages[weatherType];
                img.alt = weatherType;
            }

            // Return a map of objects that contain the high temp, low temp, and weather for the next 5 days
            function getSummaryForecast(forecastList) {  
                // Map for storing high, low, weather
                const forecast = [];
                    
                // Determine high and low for each day
                forecastList.forEach(function (item) {
                    // Extract just the yyyy-mm-dd 
                    const date = item.dt_txt.substr(0, 10);
                            
                    // Extract temperature
                    const temp = item.main.temp;

                    // Has this date been seen before?
                    if (date in forecast) {         
                        // Determine if the temperature is a new low or high
                        if (temp < forecast[date].low) {
                            forecast[date].low = temp;
                        }
                        if (temp > forecast[date].high) {
                            forecast[date].high = temp;
                        }
                    }
                    else {
                        // Initialize new forecast
                        const temps = {
                        high: temp,
                        low: temp,
                        weather: item.weather[0].main
                        }   
                                
                        // Add entry to map 
                        forecast[date] = temps;
                    }
                });
                return forecast;
            }

            loadWeather();
        }
        getData();

    </script>

</body>

</html>